{
    "type": "bundle",
    "id": "bundle--9e934515-3e62-4be3-ad7d-e1fc072d571d",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "name": "CVE-1999-0876",
            "description": "Buffer overflow in Internet Explorer 4.0 via EMBED tag.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-1999-0876"
                },
                {
                    "source_name": "cwe",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "Q176697",
                    "url": "http://support.microsoft.com/support/kb/articles/q176/6/97.asp"
                },
                {
                    "source_name": "Q185959",
                    "url": "http://support.microsoft.com/default.aspx?scid=kb;[LN];Q185959"
                },
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ],
            "object_marking_refs": [
                "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
            ],
            "extensions": {
                "extension-definition--b2b5f2cd-49e6-4091-a0e0-c0bb71543e23": {
                    "extension_type": "property-extension",
                    "nvd_cve": {
                        "data_type": "CVE",
                        "data_format": "MITRE",
                        "data_version": "4.0",
                        "CVE_data_meta": {
                            "ID": "CVE-1999-0876",
                            "ASSIGNER": "cve@mitre.org"
                        },
                        "problemtype": {
                            "problemtype_data": [
                                {
                                    "description": [
                                        {
                                            "lang": "en",
                                            "value": "CWE-119"
                                        }
                                    ]
                                }
                            ]
                        },
                        "references": {
                            "reference_data": [
                                {
                                    "url": "http://support.microsoft.com/support/kb/articles/q176/6/97.asp",
                                    "name": "Q176697",
                                    "refsource": "MSKB",
                                    "tags": []
                                },
                                {
                                    "url": "http://support.microsoft.com/default.aspx?scid=kb;[LN];Q185959",
                                    "name": "Q185959",
                                    "refsource": "MSKB",
                                    "tags": []
                                }
                            ]
                        },
                        "description": {
                            "description_data": [
                                {
                                    "lang": "en",
                                    "value": "Buffer overflow in Internet Explorer 4.0 via EMBED tag."
                                }
                            ]
                        }
                    },
                    "configurations": {
                        "CVE_data_version": "4.0",
                        "nodes": [
                            {
                                "operator": "OR",
                                "children": [],
                                "cpe_match": [
                                    {
                                        "vulnerable": true,
                                        "cpe23Uri": "cpe:2.3:a:microsoft:ie:3.0:*:mac_os:*:*:*:*:*",
                                        "cpe_name": []
                                    },
                                    {
                                        "vulnerable": true,
                                        "cpe23Uri": "cpe:2.3:a:microsoft:ie:3.1:*:mac_os:*:*:*:*:*",
                                        "cpe_name": []
                                    },
                                    {
                                        "vulnerable": true,
                                        "cpe23Uri": "cpe:2.3:a:microsoft:ie:4.0:a:*:*:*:*:*:*",
                                        "cpe_name": []
                                    },
                                    {
                                        "vulnerable": true,
                                        "cpe23Uri": "cpe:2.3:a:microsoft:internet_explorer:4.0:*:*:*:*:*:*:*",
                                        "cpe_name": [
                                            {
                                                "cpe23Uri": "cpe:2.3:a:microsoft:internet_explorer:4.0:*:*:*:*:*:*:*",
                                                "lastModifiedDate": "2021-07-22T13:53Z"
                                            }
                                        ]
                                    },
                                    {
                                        "vulnerable": true,
                                        "cpe23Uri": "cpe:2.3:a:microsoft:internet_explorer:4.1:*:*:*:*:*:*:*",
                                        "cpe_name": [
                                            {
                                                "cpe23Uri": "cpe:2.3:a:microsoft:internet_explorer:4.1:*:*:*:*:*:*:*",
                                                "lastModifiedDate": "2021-07-22T13:55Z"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "impact": {
                        "baseMetricV2": {
                            "cvssV2": {
                                "version": "2.0",
                                "vectorString": "AV:N/AC:L/Au:N/C:C/I:C/A:C",
                                "accessVector": "NETWORK",
                                "accessComplexity": "LOW",
                                "authentication": "NONE",
                                "confidentialityImpact": "COMPLETE",
                                "integrityImpact": "COMPLETE",
                                "availabilityImpact": "COMPLETE",
                                "baseScore": 10.0
                            },
                            "severity": "HIGH",
                            "exploitabilityScore": 10.0,
                            "impactScore": 10.0,
                            "acInsufInfo": true,
                            "obtainAllPrivilege": false,
                            "obtainUserPrivilege": false,
                            "obtainOtherPrivilege": false,
                            "userInteractionRequired": false
                        }
                    },
                    "publishedDate": "2000-01-04T05:00Z",
                    "lastModifiedDate": "2021-07-22T13:55Z"
                }
            }
        },
        {
            "type": "indicator",
            "spec_version": "2.1",
            "id": "indicator--a970b614-388e-4c97-9cb0-c73b832d8131",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "name": "CVE-1999-0876",
            "description": "Buffer overflow in Internet Explorer 4.0 via EMBED tag.",
            "indicator_types": [
                "compromised"
            ],
            "pattern": "[(software:cpe='cpe:2.3:a:microsoft:ie:3.0:*:mac_os:*:*:*:*:*' OR software:cpe='cpe:2.3:a:microsoft:ie:3.1:*:mac_os:*:*:*:*:*' OR software:cpe='cpe:2.3:a:microsoft:ie:4.0:a:*:*:*:*:*:*' OR software:cpe='cpe:2.3:a:microsoft:internet_explorer:4.0:*:*:*:*:*:*:*' OR software:cpe='cpe:2.3:a:microsoft:internet_explorer:4.1:*:*:*:*:*:*:*')]",
            "pattern_type": "stix",
            "pattern_version": "2.1",
            "valid_from": "2000-01-04T05:00:00Z",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ],
            "object_marking_refs": [
                "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
            ],
            "extensions": {
                "extension-definition--b463c449-d022-48b7-b464-3e9c7ec5cf16": {
                    "extension_type": "property-extension",
                    "all_cpe23uris": [
                        "cpe:2.3:a:microsoft:ie:3.1:*:mac_os:*:*:*:*:*",
                        "cpe:2.3:a:microsoft:internet_explorer:4.0:*:*:*:*:*:*:*",
                        "cpe:2.3:a:microsoft:ie:3.0:*:mac_os:*:*:*:*:*",
                        "cpe:2.3:a:microsoft:ie:4.0:a:*:*:*:*:*:*",
                        "cpe:2.3:a:microsoft:internet_explorer:4.1:*:*:*:*:*:*:*"
                    ],
                    "all_cpe23uris_refs": [],
                    "vulnerable_cpe23uris": [
                        "cpe:2.3:a:microsoft:ie:3.1:*:mac_os:*:*:*:*:*",
                        "cpe:2.3:a:microsoft:internet_explorer:4.0:*:*:*:*:*:*:*",
                        "cpe:2.3:a:microsoft:ie:3.0:*:mac_os:*:*:*:*:*",
                        "cpe:2.3:a:microsoft:ie:4.0:a:*:*:*:*:*:*",
                        "cpe:2.3:a:microsoft:internet_explorer:4.1:*:*:*:*:*:*:*"
                    ],
                    "vulnerable_cpe23uris_refs": []
                }
            }
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--247dafce-03c5-476b-800c-fca73dc1a29d",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "identifies",
            "source_ref": "indicator--a970b614-388e-4c97-9cb0-c73b832d8131",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        },
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--c4a0c765-e4ca-43c2-996e-08ce13ae8f80",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Client-side Injection-induced Buffer Overflow",
            "description": "This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/14.html",
                    "external_id": "CAPEC-14"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html",
                    "external_id": "CWE-120"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/353.html",
                    "external_id": "CWE-353"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/118.html",
                    "external_id": "CWE-118"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/680.html",
                    "external_id": "CWE-680"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_can_follow_refs": [
                "attack-pattern--f190e1b3-e8d6-4aef-817c-b3e7782e2aed"
            ],
            "x_capec_child_of_refs": [
                "attack-pattern--77e51461-7843-411c-a90e-852498957f76"
            ],
            "x_capec_consequences": {
                "Availability": [
                    "Resource Consumption (Denial of Service)",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Read Data",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Integrity": [
                    "Modify Data",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>Authors often use <EMBED> tags in HTML documents. For example</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\"><EMBED TYPE=\"audio/midi\" SRC=\"/path/file.mid\" AUTOSTART=\"true\"></xhtml:div>\n               <xhtml:p>In Internet Explorer 4.0 an adversary attacker supplies an overly long path in the SRC= directive, the mshtml.dll component will suffer a buffer overflow. This is a standard example of content in a Web page being directed to exploit a faulty module in the system. There are potentially thousands of different ways data can propagate into a given system, thus these kinds of attacks will continue to be found in the wild.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify target client-side application: </b>The adversary identifies a target client-side application to perform the buffer overflow on. The most common are browsers. If there is a known browser vulnerability an adversary could target that.</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Find injection vector: </b>The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Many times client side applications will be open source, so an adversary can examine the source code to identify possible injection vectors.</td></tr><tr><td>Examine APIs of the client-side application and look for areas where a buffer overflow might be possible.</td></tr></tbody></table><li> <p> <b>Create hostile service: </b>The adversary creates a hostile service that will deliver content to the client-side application. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>If the client-side application is a browser, the adversary will create a service that delivers a malicious webpage to the browser.</td></tr><tr><td>Create malicious shellcode that will execute when the program execution is returned to it.</td></tr><tr><td>Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Overflow the buffer: </b>Using the injection vector, the adversary delivers the content to the client-side application using the hostile service and overflows the buffer.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>If the adversary is targeting a local client-side application, they just need to use the service themselves.</td></tr><tr><td>If the adversary is attempting to cause an overflow on an external user's client-side application, they must get the user to attach to their service by some other means. This could be getting a user to visit their hostile webpage to target a user's browser.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_prerequisites": [
                "The targeted client software communicates with an external server.",
                "The targeted client software has a buffer overflow vulnerability."
            ],
            "x_capec_skills_required": {
                "High": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level.",
                "Low": "To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.8"
        },
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--e61f5dd9-d26e-454f-ab07-171f3dea6e73",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2022-02-22T00:00:00.000Z",
            "name": "Buffer Overflow via Parameter Expansion",
            "description": "In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/47.html",
                    "external_id": "CAPEC-47"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html",
                    "external_id": "CWE-120"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/118.html",
                    "external_id": "CWE-118"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/130.html",
                    "external_id": "CWE-130"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/131.html",
                    "external_id": "CWE-131"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/680.html",
                    "external_id": "CWE-680"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--77e51461-7843-411c-a90e-852498957f76"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Unreliable Execution",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Gain Privileges",
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Read Data"
                ],
                "Integrity": [
                    "Modify Data",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>Attack Example: FTP glob()</xhtml:p>\n               <xhtml:p>The glob() function in FTP servers has been susceptible to attack as a result of incorrect resizing. This is an ftpd glob() Expansion LIST Heap Overflow Vulnerability. ftp daemon contains a heap-based buffer overflow condition. The overflow occurs when the LIST command is issued with an argument that expands into an oversized string after being processed by glob().</xhtml:p>\n               <xhtml:p>This buffer overflow occurs in memory that is dynamically allocated. It may be possible for adversaries to exploit this vulnerability and execute arbitrary code on the affected host.</xhtml:p>\n               <xhtml:p>To exploit this, the adversary must be able to create directories on the target host.</xhtml:p>\n               <xhtml:p>The glob() function is used to expand short-hand notation into complete file names. By sending to the FTP server a request containing a tilde (~) and other wildcard characters in the pathname string, a remote adversary can overflow a buffer and execute arbitrary code on the FTP server to gain root privileges. Once the request is processed, the glob() function expands the user input, which could exceed the expected length. In order to exploit this vulnerability, the adversary must be able to create directories on the FTP server.</xhtml:p>\n               <xhtml:p>[REF-1]</xhtml:p>See also: CVE-2001-0249",
                "\n               <xhtml:p>Buffer overflow in the glob implementation in libc in NetBSD-current before 20050914, and NetBSD 2.* and 3.* before 20061203, as used by the FTP daemon, allows remote authenticated users to execute arbitrary code via a long pathname that results from path expansion.</xhtml:p>\n               <xhtml:p>The limit computation of an internal buffer was done incorrectly. The size of the buffer in byte was used as element count, even though the elements of the buffer are 2 bytes long. Long expanded path names would therefore overflow the buffer.</xhtml:p>See also: CVE-2006-6652"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify target application: </b>The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Find injection vector: </b>The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>In this attack, the normal method of providing large user input does not work. The program performs bounds checking on the user input, but not the expanded user input. The adversary needs to provide input that they believe will be expanded by the program to overflow a buffer. To identify where this is possible, an adversary either needs to have knowledge of the inner workings of the program or use a disassembler and other reverse engineering tools to guide the search.</td></tr></tbody></table><li> <p> <b>Craft overflow content: </b>The adversary crafts the input to be given to the program. If the intent is to simply cause the software to crash, the input needs only to expand to an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft input that expands in a way that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create specific files and directories on the system and then give input using path traversal shortcuts to those directories that could expand past an input buffer.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Overflow the buffer: </b>Using the injection vector, the adversary gives the crafted input to the program, overflowing the buffer.</p></li></ol></div>",
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_prerequisites": [
                "The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.",
                "The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is)."
            ],
            "x_capec_resources_required": [
                "Access to the program source or binary. If the program is only available in binary then a disassembler and other reverse engineering tools will be helpful."
            ],
            "x_capec_skills_required": {
                "High": "Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the adversary needs to write the shell code to accomplish their goals, but the adversary also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled adversary."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.8"
        },
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--e62000f0-addd-4156-b9fd-469bbb211d45",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Buffer Overflow in an API Call",
            "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/8.html",
                    "external_id": "CAPEC-8"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html",
                    "external_id": "CWE-120"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/118.html",
                    "external_id": "CWE-118"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/680.html",
                    "external_id": "CWE-680"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/733.html",
                    "external_id": "CWE-733"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_can_follow_refs": [
                "attack-pattern--ca989a50-b24e-4917-a234-ce4788fa21c7"
            ],
            "x_capec_child_of_refs": [
                "attack-pattern--77e51461-7843-411c-a90e-852498957f76"
            ],
            "x_capec_consequences": {
                "Availability": [
                    "Unreliable Execution",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Read Data"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:b>Attack Example: Libc in FreeBSD</xhtml:b>\n               <xhtml:p>A buffer overflow in the FreeBSD utility setlocale (found in the libc module) puts many programs at risk all at once.</xhtml:p>\n            ",
                "\n               <xhtml:b>Xtlib</xhtml:b>\n               <xhtml:p>A buffer overflow in the Xt library of the X windowing system allows local users to execute commands with root privileges.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify target application: </b>The adversary, with knowledge of vulnerable libraries or shared code modules, identifies a target application or program that makes use of these.</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Find injection vector: </b>The adversary attempts to use the API, and if they can they send a large amount of data to see if the buffer overflow attack really does work.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.</td></tr></tbody></table><li> <p> <b>Craft overflow content: </b>The adversary crafts the content to be injected based on their knowledge of the vulnerability and their desired outcome. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create malicious shellcode that will execute when the program execution is returned to it.</td></tr><tr><td>Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Overflow the buffer: </b>Using the API as the injection vector, the adversary injects the crafted overflow content into the buffer.</p></li></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "The target host exposes an API to the user.",
                "One or more API functions exposed by the target host has a buffer overflow vulnerability."
            ],
            "x_capec_skills_required": {
                "High": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.",
                "Low": "An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.8"
        },
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--476ca631-2695-43f8-82f6-83c06a07ae36",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2019-04-04T00:00:00.000Z",
            "name": "Buffer Manipulation",
            "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/123.html",
                    "external_id": "CAPEC-123"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Meta",
            "x_capec_consequences": {
                "Availability": [
                    "Unreliable Execution (A buffer manipulation attack often results in a crash of the application due to the corruption of memory.)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (If constructed properly, a buffer manipulation attack can be used to contol the execution of the application leading to any number of negative consequenses.)",
                    "Modify Data (If constructed properly, a buffer manipulation attack can be used to contol the execution of the application leading to any number of negative consequenses.)",
                    "Read Data (If constructed properly, a buffer manipulation attack can be used to contol the execution of the application leading to any number of negative consequenses.)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_likelihood_of_attack": "High",
            "x_capec_parent_of_refs": [
                "attack-pattern--77e51461-7843-411c-a90e-852498957f76",
                "attack-pattern--40eddae8-4d7d-4fc3-b220-1c9706f01a96"
            ],
            "x_capec_prerequisites": [
                "The adversary must identify a programmatic means for interacting with a buffer, such as vulnerable C code, and be able to provide input to this interaction."
            ],
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Very High",
            "x_capec_version": "3.8"
        },
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--3c08bb9d-43b5-4468-8b38-387c6cb60da7",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "MIME Conversion",
            "description": "An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/42.html",
                    "external_id": "CAPEC-42"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html",
                    "external_id": "CWE-120"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "CERT Advisory CA-1997-05 MIME Conversion Buffer Overflow in Sendmail Versions 8.8.3 and 8.8.4, Software Engineering Institute: Carnegie Mellon University",
                    "url": "http://www.cert.org/advisories/CA-1997-05.html",
                    "external_id": "REF-364"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--77e51461-7843-411c-a90e-852498957f76"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Unreliable Execution"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Gain Privileges"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges.</xhtml:p>\n               <xhtml:p>Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild.</xhtml:p>See also: CVE-1999-0047"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify target mail server: </b>The adversary identifies a target mail server that they wish to attack.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use Nmap on a system to identify a mail server service.</td></tr></tbody></table><li> <p> <b>Determine viability of attack: </b>Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4).</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Find injection vector: </b>Identify places in the system where vulnerable MIME conversion routines may be used.</p></li><li> <p> <b>Craft overflow content: </b>The adversary crafts e-mail messages with special headers that will cause a buffer overflow for the vulnerable MIME conversion routine. The intent of this attack is to leverage the overflow for execution of arbitrary code and gain access to the mail server machine, so the adversary will craft an email that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversary's choosing.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create malicious shellcode that will execute when the program execution is returned to it.</td></tr><tr><td>Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Overflow the buffer: </b>Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code.</p></li></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "The target system uses a mail server.",
                "Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system."
            ],
            "x_capec_skills_required": {
                "High": "Causing arbitrary code to execute on the target system.",
                "Low": "It may be trivial to cause a DoS via this attack pattern"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.8"
        },
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--4a29d66d-8617-4382-b456-578ecdb1609e",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Buffer Overflow via Environment Variables",
            "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/10.html",
                    "external_id": "CAPEC-10"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html",
                    "external_id": "CWE-120"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/302.html",
                    "external_id": "CWE-302"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/118.html",
                    "external_id": "CWE-118"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/99.html",
                    "external_id": "CWE-99"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/680.html",
                    "external_id": "CWE-680"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/733.html",
                    "external_id": "CWE-733"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "OWASP Attacks",
                    "description": "Buffer Overflow via Environment Variables",
                    "url": "https://owasp.org/www-community/attacks/Buffer_Overflow_via_Environment_Variables"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "Sharefuzz",
                    "url": "http://sharefuzz.sourceforge.net",
                    "external_id": "REF-2"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_can_follow_refs": [
                "attack-pattern--ca989a50-b24e-4917-a234-ce4788fa21c7"
            ],
            "x_capec_child_of_refs": [
                "attack-pattern--77e51461-7843-411c-a90e-852498957f76"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Unreliable Execution",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Read Data",
                    "Gain Privileges"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>A buffer overflow in sccw allows local users to gain root access via the $HOME environmental variable. See also: CVE-1999-0906</xhtml:p>\n            ",
                "\n               <xhtml:p>A buffer overflow in the rlogin program involves its consumption of the $TERM environmental variable. See also: CVE-1999-0046</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify target application: </b>The adversary identifies a target application or program to perform the buffer overflow on. In this attack the adversary looks for an application that loads the content of an environment variable into a buffer.</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Find injection vector: </b>The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Change the values of environment variables thought to be used by the application to contain excessive data. If the program is loading the value of the environment variable into a buffer, this could cause a crash and an attack vector will be found.</td></tr></tbody></table><li> <p> <b>Craft overflow content: </b>The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create malicious shellcode that will execute when the program execution is returned to it.</td></tr><tr><td>Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Overflow the buffer: </b>Using the injection vector, the adversary injects the crafted overflow content into the buffer.</p></li></ol></div>",
            "x_capec_extended_description": "Although the focus of this attack is putting excessive content into an environment variable that is loaded into a buffer, environment variables can be used to assist a classic buffer overflow attack as well. In the case where the buffer used in a traditional buffer overflow attack is not large enough to store the adversary's shell code, they will store the shell code in an environment variable and attempt to return to its address, rather than back into the data they wrote to the buffer.",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "The application uses environment variables.",
                "An environment variable exposed to the user is vulnerable to a buffer overflow.",
                "The vulnerable environment variable uses untrusted data.",
                "Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer."
            ],
            "x_capec_skills_required": {
                "High": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.",
                "Low": "An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.8"
        },
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--d591235a-da3b-4872-8962-27fe44fa1ab0",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Filter Failure through Buffer Overflow",
            "description": "In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/24.html",
                    "external_id": "CAPEC-24"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html",
                    "external_id": "CWE-120"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/118.html",
                    "external_id": "CWE-118"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/680.html",
                    "external_id": "CWE-680"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/733.html",
                    "external_id": "CWE-733"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--77e51461-7843-411c-a90e-852498957f76"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Bypass Protection Mechanism"
                ],
                "Authorization": [
                    "Bypass Protection Mechanism"
                ],
                "Availability": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Unreliable Execution"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Bypass Protection Mechanism"
                ],
                "Integrity": [
                    "Modify Data",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>Sending in arguments that are too long to cause the filter to fail open is one instantiation of the filter failure attack. The Taylor UUCP daemon is designed to remove hostile arguments before they can be executed. If the arguments are too long, however, the daemon fails to remove them. This leaves the door open for attack.</xhtml:p>\n            ",
                "A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.",
                "Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack."
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Survey: </b>The attacker surveys the target application, possibly as a valid and authenticated user</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Spidering web sites for inputs that involve potential filtering</td></tr><tr><td>Brute force guessing of filtered inputs</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Attempt injections: </b>Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Brute force attack through black box penetration test tool.</td></tr><tr><td>Fuzzing of communications protocols</td></tr><tr><td>Manual testing of possible inputs with attack data.</td></tr></tbody></table><li> <p> <b>Monitor responses: </b>Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.</td></tr><tr><td>Check Log files. An attacker with access to log files can look at the outcome of bad input.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Abuse the system through filter failure: </b>An attacker writes a script to consistently induce the filter failure.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.</td></tr><tr><td>Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.</td></tr><tr><td>An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "Ability to control the length of data passed to an active filter."
            ],
            "x_capec_skills_required": {
                "High": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.",
                "Low": "An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.8"
        },
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--77e51461-7843-411c-a90e-852498957f76",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2021-10-21T00:00:00.000Z",
            "name": "Overflow Buffers",
            "description": "Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/100.html",
                    "external_id": "CAPEC-100"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html",
                    "external_id": "CWE-120"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/131.html",
                    "external_id": "CWE-131"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/129.html",
                    "external_id": "CWE-129"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/805.html",
                    "external_id": "CWE-805"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/680.html",
                    "external_id": "CWE-680"
                },
                {
                    "source_name": "WASC",
                    "description": "Buffer Overflow",
                    "url": "http://projects.webappsec.org/Buffer-Overflow",
                    "external_id": "07"
                },
                {
                    "source_name": "OWASP Attacks",
                    "description": "Buffer overflow attack",
                    "url": "https://owasp.org/www-community/attacks/Buffer_overflow_attack"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "OWASP Vulnerabilities, The Open Web Application Security Project (OWASP)",
                    "url": "https://owasp.org/www-community/vulnerabilities/Buffer_Overflow",
                    "external_id": "REF-620"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Standard",
            "x_capec_child_of_refs": [
                "attack-pattern--476ca631-2695-43f8-82f6-83c06a07ae36"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Unreliable Execution",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Gain Privileges"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "The most straightforward example is an application that reads in input from the user and stores it in an internal buffer but does not check that the size of the input data is less than or equal to the size of the buffer. If the user enters excessive length data, the buffer may overflow leading to the application crashing, or worse, enabling the user to cause execution of injected code.",
                "Many web servers enforce security in web applications through the use of filter plugins. An example is the SiteMinder plugin used for authentication. An overflow in such a plugin, possibly through a long URL or redirect parameter, can allow an adversary not only to bypass the security checks but also execute arbitrary code on the target web server in the context of the user that runs the web server process."
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify target application: </b>The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Find injection vector: </b>The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.</td></tr></tbody></table><li> <p> <b>Craft overflow content: </b>The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create malicious shellcode that will execute when the program execution is returned to it.</td></tr><tr><td>Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Overflow the buffer: </b>Using the injection vector, the adversary injects the crafted overflow content into the buffer.</p></li></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_parent_of_refs": [
                "attack-pattern--4a29d66d-8617-4382-b456-578ecdb1609e",
                "attack-pattern--c4a0c765-e4ca-43c2-996e-08ce13ae8f80",
                "attack-pattern--d591235a-da3b-4872-8962-27fe44fa1ab0",
                "attack-pattern--4b856ceb-8bf7-4f0e-b423-89a420455b1d",
                "attack-pattern--3c08bb9d-43b5-4468-8b38-387c6cb60da7",
                "attack-pattern--d3634072-88f9-4711-987f-6bff7698bd4c",
                "attack-pattern--5d5ff43b-cbe7-4986-bfec-cf979f97e6b9",
                "attack-pattern--8e403d18-af4e-4abd-bd38-0f99f74b4636",
                "attack-pattern--e61f5dd9-d26e-454f-ab07-171f3dea6e73",
                "attack-pattern--4cd18074-15c1-4206-8391-115685669623",
                "attack-pattern--e62000f0-addd-4156-b9fd-469bbb211d45",
                "attack-pattern--b6a2983b-1d97-4698-b210-961ed0523f33"
            ],
            "x_capec_prerequisites": [
                "Targeted software performs buffer operations.",
                "Targeted software inadequately performs bounds-checking on buffer operations.",
                "Adversary has the capability to influence the input to buffer operations."
            ],
            "x_capec_resources_required": [
                "None: No specialized resources are required to execute this type of attack. Detecting and exploiting a buffer overflow does not require any resources beyond knowledge of and access to the target system."
            ],
            "x_capec_skills_required": {
                "High": "In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.",
                "Low": "In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Very High",
            "x_capec_version": "3.8"
        },
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--d3634072-88f9-4711-987f-6bff7698bd4c",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2022-02-22T00:00:00.000Z",
            "name": "Overflow Binary Resource File",
            "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/44.html",
                    "external_id": "CAPEC-44"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html",
                    "external_id": "CWE-120"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--77e51461-7843-411c-a90e-852498957f76",
                "attack-pattern--521348c2-b1df-492f-ac83-1f3ffe102046"
            ],
            "x_capec_consequences": {
                "Availability": [
                    "Unreliable Execution",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software",
                "Software"
            ],
            "x_capec_example_instances": [
                "Binary files like music and video files are appended with additional data to cause buffer overflow on target systems. Because these files may be filled with otherwise popular content, the adversary has an excellent vector for wide distribution. There have been numerous cases, for example of malicious screen savers for sports teams that are distributed on the event of the team winning a championship."
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify target software: </b>The adversary identifies software that uses external binary files in some way. This could be a file upload, downloading a file from a shared location, or other means.</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Find injection vector: </b>The adversary creates a malicious binary file by altering the header to make the file seem shorter than it is. Additional bytes are added to the end of the file to be placed in the overflowed location. The adversary then deploys the file to the software to determine if a buffer overflow was successful.</p></li><li> <p> <b>Craft overflow content: </b>Once the adversary has determined that this attack is viable, they will specially craft the binary file in a way that achieves the desired behavior. If the source code is available, the adversary can carefully craft the malicious file so that the return address is overwritten to an intended value. If the source code is not available, the adversary will iteratively alter the file in order to overwrite the return address correctly.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create malicious shellcode that will execute when the program execution is returned to it.</td></tr><tr><td>Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Overflow the buffer: </b>Once the adversary has constructed a file that will effectively overflow the targeted software in the intended way. The file is deployed to the software, either by serving it directly to the software or placing it in a shared location for a victim to load into the software.</p></li></ol></div>",
            "x_capec_extended_description": "This attack pattern is a variant of standard buffer overflow attack using an unexpected vector (binary files) to wrap its attack and open up a new attack vector. The adversary is required to either directly serve the binary content to the victim, or place it in a locale like a MP3 sharing application for the victim to download. The adversary then is notified upon the download or otherwise locates the vulnerability opened up by the buffer overflow.",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "Target software processes binary resource files.",
                "Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file."
            ],
            "x_capec_skills_required": {
                "Medium": "To modify file, deceive client into downloading, locate and exploit remote stack or heap vulnerability"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Very High",
            "x_capec_version": "3.8"
        },
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--5d5ff43b-cbe7-4986-bfec-cf979f97e6b9",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Buffer Overflow via Symbolic Links",
            "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/45.html",
                    "external_id": "CAPEC-45"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html",
                    "external_id": "CWE-120"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/285.html",
                    "external_id": "CWE-285"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/302.html",
                    "external_id": "CWE-302"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/118.html",
                    "external_id": "CWE-118"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/680.html",
                    "external_id": "CWE-680"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--77e51461-7843-411c-a90e-852498957f76"
            ],
            "x_capec_consequences": {
                "Availability": [
                    "Unreliable Execution",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Read Data"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify target application: </b>The adversary identifies a target application or program that might load in certain files to memory.</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Find injection vector: </b>The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>The adversary creates or modifies a symbolic link pointing to those files which contain an excessive amount of data. If creating a symbolic link to one of those files causes different behavior in the application, then an injection vector has been identified.</td></tr></tbody></table><li> <p> <b>Craft overflow file content: </b>The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create malicious shellcode that will execute when the program execution is returned to it.</td></tr><tr><td>Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Overflow the buffer: </b>Using the specially crafted file content, the adversary creates a symbolic link from the identified resource to the malicious file, causing a targeted buffer overflow attack.</p></li></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "The adversary can create symbolic link on the target host.",
                "The target host does not perform correct boundary checking while consuming data from a resources."
            ],
            "x_capec_skills_required": {
                "High": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.",
                "Low": "An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.8"
        },
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--b6a2983b-1d97-4698-b210-961ed0523f33",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Buffer Overflow in Local Command-Line Utilities",
            "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/9.html",
                    "external_id": "CAPEC-9"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html",
                    "external_id": "CWE-120"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/118.html",
                    "external_id": "CWE-118"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/680.html",
                    "external_id": "CWE-680"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/733.html",
                    "external_id": "CWE-733"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_can_follow_refs": [
                "attack-pattern--ca989a50-b24e-4917-a234-ce4788fa21c7"
            ],
            "x_capec_child_of_refs": [
                "attack-pattern--77e51461-7843-411c-a90e-852498957f76"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Unreliable Execution"
                ],
                "Confidentiality": [
                    "Gain Privileges",
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Read Data"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:div style=\"margin-left:1em;\">\n                  <xhtml:b>Attack Example: HPUX passwd</xhtml:b>\n                  <xhtml:div>A buffer overflow in the HPUX passwd command allows local users to gain root privileges via a command-line option.</xhtml:div>\n               </xhtml:div>\n               <xhtml:div style=\"margin-left:1em;\">\n                  <xhtml:b>Attack Example: Solaris getopt</xhtml:b>\n                  <xhtml:div>A buffer overflow in Solaris's getopt command (found in libc) allows local users to gain root privileges via a long argv[0].</xhtml:div>\n               </xhtml:div>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify target system: </b>The adversary first finds a target system that they want to gain elevated priveleges on. This could be a system they already have some level of access to or a system that they will gain unauthorized access at a lower privelege using some other means.</p></li><li> <p> <b>Find injection vector: </b>The adversary identifies command line utilities exposed by the target host that contain buffer overflow vulnerabilites. The adversary likely knows which utilities have these vulnerabilities and what the effected versions are, so they will also obtain version numbers for these utilities.</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Craft overflow command: </b>Once the adversary has found a vulnerable utility, they will use their knownledge of the vulnerabilty to create the command that will exploit the buffer overflow.</p></li></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Overflow the buffer: </b>Using the injection vector, the adversary executes the crafted command, gaining elevated priveleges on the machine.</p></li></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "The target host exposes a command-line utility to the user.",
                "The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited."
            ],
            "x_capec_skills_required": {
                "High": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.",
                "Low": "An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.8"
        },
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--8e403d18-af4e-4abd-bd38-0f99f74b4636",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Overflow Variables and Tags",
            "description": "This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/46.html",
                    "external_id": "CAPEC-46"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html",
                    "external_id": "CWE-120"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/118.html",
                    "external_id": "CWE-118"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/680.html",
                    "external_id": "CWE-680"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/733.html",
                    "external_id": "CWE-733"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--77e51461-7843-411c-a90e-852498957f76"
            ],
            "x_capec_consequences": {
                "Availability": [
                    "Unreliable Execution",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Read Data"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>A buffer overflow vulnerability exists in the Yamaha MidiPlug that can be accessed via a Text variable found in an EMBED tag.</xhtml:p>See also: CVE-1999-0946",
                "\n               <xhtml:p>A buffer overflow in Exim allows local users to gain root privileges by providing a long :include: option in a .forward file.</xhtml:p>See also: CVE-1999-0971"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify target application: </b>The adversary identifies a target application or program to perform the buffer overflow on. Adversaries look for applications or programs that accept formatted files, such as configuration files, as input.</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Find injection vector: </b>The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Knowing the type of file that an application takes as input, the adversary takes a normal input file and modifies a single variable or tag to contain a large amount of data. If there is a crash, this means that a buffer overflow attack is possible. The adversary will keep changing single variables or tags one by one until they see a change in behavior.</td></tr></tbody></table><li> <p> <b>Craft overflow content: </b>The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create malicious shellcode that will execute when the program execution is returned to it.</td></tr><tr><td>Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Overflow the buffer: </b>The adversary will upload the crafted file to the application, causing a buffer overflow.</p></li></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_peer_of_refs": [
                "attack-pattern--e62000f0-addd-4156-b9fd-469bbb211d45",
                "attack-pattern--4a29d66d-8617-4382-b456-578ecdb1609e"
            ],
            "x_capec_prerequisites": [
                "The target program consumes user-controllable data in the form of tags or variables.",
                "The target program does not perform sufficient boundary checking."
            ],
            "x_capec_skills_required": {
                "High": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.",
                "Low": "An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.8"
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--e892dbe1-fa79-4f09-8857-dfd6bf8f836d",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "targets",
            "source_ref": "attack-pattern--c4a0c765-e4ca-43c2-996e-08ce13ae8f80",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--085819f5-6606-4e76-85a0-c0ae66221d50",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "targets",
            "source_ref": "attack-pattern--e61f5dd9-d26e-454f-ab07-171f3dea6e73",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--a1777801-b86c-44cf-b35e-6e871a6d8b2a",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "targets",
            "source_ref": "attack-pattern--e62000f0-addd-4156-b9fd-469bbb211d45",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--58b55b65-550b-4e96-80c8-ae84019297d3",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "targets",
            "source_ref": "attack-pattern--476ca631-2695-43f8-82f6-83c06a07ae36",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--b99ec496-2f50-4f9a-97e0-c6506ccecb4d",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "targets",
            "source_ref": "attack-pattern--3c08bb9d-43b5-4468-8b38-387c6cb60da7",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--92f0e613-d5eb-4fd4-82c6-032866915b76",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "targets",
            "source_ref": "attack-pattern--4a29d66d-8617-4382-b456-578ecdb1609e",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--6732d715-0057-4e6c-9a32-4662bb03cf0c",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "targets",
            "source_ref": "attack-pattern--d591235a-da3b-4872-8962-27fe44fa1ab0",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--6d41c102-aaca-48aa-a472-c3835cd87ae4",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "targets",
            "source_ref": "attack-pattern--77e51461-7843-411c-a90e-852498957f76",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--c61221f8-3e68-4c40-b580-767744c87b06",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "targets",
            "source_ref": "attack-pattern--d3634072-88f9-4711-987f-6bff7698bd4c",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--241393c6-5286-4b53-9a3b-4654cd4244ba",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "targets",
            "source_ref": "attack-pattern--5d5ff43b-cbe7-4986-bfec-cf979f97e6b9",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--dc73eeb6-7d61-4d28-9420-f62f3400613e",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "targets",
            "source_ref": "attack-pattern--b6a2983b-1d97-4698-b210-961ed0523f33",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--c08dacef-a836-4341-b88b-7657ce695f7f",
            "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
            "created": "2000-01-04T05:00:00.000Z",
            "modified": "2021-07-22T13:55:00.000Z",
            "relationship_type": "targets",
            "source_ref": "attack-pattern--8e403d18-af4e-4abd-bd38-0f99f74b4636",
            "target_ref": "vulnerability--535f4bd4-7525-4288-88a9-333251d4f754",
            "external_references": [
                {
                    "source_name": "cve2stix",
                    "description": "This object was created using cve2stix from the Signals Corps.",
                    "url": "https://github.com/signalscorps/cve2stix"
                }
            ]
        }
    ]
}