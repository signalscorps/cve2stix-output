{
    "type": "vulnerability",
    "spec_version": "2.1",
    "id": "vulnerability--6a4e4c1b-88dd-487e-9b8d-bfef1608f93e",
    "created_by_ref": "identity--748e6444-f073-4c50-b558-f49be8897a81",
    "created": "2021-08-31T17:15:00.000Z",
    "modified": "2022-10-25T18:03:00.000Z",
    "name": "CVE-2021-39135",
    "description": "`@npmcli/arborist`, the library that calculates dependency trees and manages the node_modules folder hierarchy for the npm command line interface, aims to guarantee that package dependency contracts will be met, and the extraction of package contents will always be performed into the expected folder. This is accomplished by extracting package contents into a project's `node_modules` folder. If the `node_modules` folder of the root project or any of its dependencies is somehow replaced with a symbolic link, it could allow Arborist to write package dependencies to any arbitrary location on the file system. Note that symbolic links contained within package artifact contents are filtered out, so another means of creating a `node_modules` symbolic link would have to be employed. 1. A `preinstall` script could replace `node_modules` with a symlink. (This is prevented by using `--ignore-scripts`.) 2. An attacker could supply the target with a git repository, instructing them to run `npm install --ignore-scripts` in the root. This may be successful, because `npm install --ignore-scripts` is typically not capable of making changes outside of the project directory, so it may be deemed safe. This is patched in @npmcli/arborist 2.8.2 which is included in npm v7.20.7 and above. For more information including workarounds please see the referenced GHSA-gmw6-94gg-2rc2.",
    "external_references": [
        {
            "source_name": "cve",
            "external_id": "CVE-2021-39135"
        },
        {
            "source_name": "cwe",
            "external_id": "CWE-61"
        },
        {
            "source_name": "https://github.com/npm/arborist/security/advisories/GHSA-gmw6-94gg-2rc2",
            "url": "https://github.com/npm/arborist/security/advisories/GHSA-gmw6-94gg-2rc2"
        },
        {
            "source_name": "https://www.npmjs.com/package/@npmcli/arborist",
            "url": "https://www.npmjs.com/package/@npmcli/arborist"
        },
        {
            "source_name": "https://www.oracle.com/security-alerts/cpuoct2021.html",
            "url": "https://www.oracle.com/security-alerts/cpuoct2021.html"
        },
        {
            "source_name": "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf",
            "url": "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf"
        },
        {
            "source_name": "cve2stix",
            "description": "This object was created using cve2stix from the Signals Corps.",
            "url": "https://github.com/signalscorps/cve2stix"
        }
    ],
    "object_marking_refs": [
        "marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9"
    ],
    "extensions": {
        "extension-definition--b2b5f2cd-49e6-4091-a0e0-c0bb71543e23": {
            "extension_type": "property-extension",
            "impact": {
                "baseMetricV2": {
                    "acInsufInfo": false,
                    "cvssV2": {
                        "accessComplexity": "MEDIUM",
                        "accessVector": "LOCAL",
                        "authentication": "NONE",
                        "availabilityImpact": "PARTIAL",
                        "baseScore": 4.4,
                        "confidentialityImpact": "PARTIAL",
                        "integrityImpact": "PARTIAL",
                        "vectorString": "AV:L/AC:M/Au:N/C:P/I:P/A:P",
                        "version": "2.0"
                    },
                    "exploitabilityScore": 3.4,
                    "impactScore": 6.4,
                    "obtainAllPrivilege": false,
                    "obtainOtherPrivilege": false,
                    "obtainUserPrivilege": false,
                    "severity": "MEDIUM",
                    "userInteractionRequired": true
                },
                "baseMetricV3": {
                    "cvssV3": {
                        "attackComplexity": "LOW",
                        "attackVector": "LOCAL",
                        "availabilityImpact": "HIGH",
                        "baseScore": 7.8,
                        "baseSeverity": "HIGH",
                        "confidentialityImpact": "HIGH",
                        "integrityImpact": "HIGH",
                        "privilegesRequired": "NONE",
                        "scope": "UNCHANGED",
                        "userInteraction": "REQUIRED",
                        "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
                        "version": "3.1"
                    },
                    "exploitabilityScore": 1.8,
                    "impactScore": 5.9
                }
            },
            "lastModifiedDate": "2022-10-25T18:03Z",
            "nvd_cve": {
                "CVE_data_meta": {
                    "ASSIGNER": "security-advisories@github.com",
                    "ID": "CVE-2021-39135"
                },
                "data_format": "MITRE",
                "data_type": "CVE",
                "data_version": "4.0",
                "description": {
                    "description_data": [
                        {
                            "lang": "en",
                            "value": "`@npmcli/arborist`, the library that calculates dependency trees and manages the node_modules folder hierarchy for the npm command line interface, aims to guarantee that package dependency contracts will be met, and the extraction of package contents will always be performed into the expected folder. This is accomplished by extracting package contents into a project's `node_modules` folder. If the `node_modules` folder of the root project or any of its dependencies is somehow replaced with a symbolic link, it could allow Arborist to write package dependencies to any arbitrary location on the file system. Note that symbolic links contained within package artifact contents are filtered out, so another means of creating a `node_modules` symbolic link would have to be employed. 1. A `preinstall` script could replace `node_modules` with a symlink. (This is prevented by using `--ignore-scripts`.) 2. An attacker could supply the target with a git repository, instructing them to run `npm install --ignore-scripts` in the root. This may be successful, because `npm install --ignore-scripts` is typically not capable of making changes outside of the project directory, so it may be deemed safe. This is patched in @npmcli/arborist 2.8.2 which is included in npm v7.20.7 and above. For more information including workarounds please see the referenced GHSA-gmw6-94gg-2rc2."
                        }
                    ]
                },
                "problemtype": {
                    "problemtype_data": [
                        {
                            "description": [
                                {
                                    "lang": "en",
                                    "value": "CWE-61"
                                }
                            ]
                        }
                    ]
                },
                "references": {
                    "reference_data": [
                        {
                            "name": "https://github.com/npm/arborist/security/advisories/GHSA-gmw6-94gg-2rc2",
                            "url": "https://github.com/npm/arborist/security/advisories/GHSA-gmw6-94gg-2rc2",
                            "refsource": "CONFIRM",
                            "tags": [
                                "Third Party Advisory"
                            ]
                        },
                        {
                            "name": "https://www.npmjs.com/package/@npmcli/arborist",
                            "url": "https://www.npmjs.com/package/@npmcli/arborist",
                            "refsource": "MISC",
                            "tags": [
                                "Product",
                                "Third Party Advisory"
                            ]
                        },
                        {
                            "name": "https://www.oracle.com/security-alerts/cpuoct2021.html",
                            "url": "https://www.oracle.com/security-alerts/cpuoct2021.html",
                            "refsource": "MISC",
                            "tags": [
                                "Patch",
                                "Third Party Advisory"
                            ]
                        },
                        {
                            "name": "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf",
                            "url": "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf",
                            "refsource": "CONFIRM",
                            "tags": [
                                "Patch",
                                "Third Party Advisory"
                            ]
                        }
                    ]
                }
            },
            "publishedDate": "2021-08-31T17:15Z"
        }
    }
}